name: Build, Publish & Deploy
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Login to Azure Container Registry
      - name: Docker Login
        uses: azure/docker-login@v2
        with:
          login-server: propacr.azurecr.io
          username: propacr
          password: ${{ secrets.ACR_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        id: docker-build
        uses: docker/build-push-action@v6
        with:
          push: true
          file: ./docker/Dockerfile
          tags: |
            propacr.azurecr.io/adema-ai:latest
            propacr.azurecr.io/adema-ai:${{ github.sha }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Read staging deployment JSON
      - name: Staging deploy-stg.json
        id: read-stg-json
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const file = fs.readFileSync('./deployment/deploy-stg.json', 'utf8');
            const data = JSON.parse(file);
            data.image.tag = "${{ github.sha }}"
            return { manifest: JSON.stringify(data) }

      # Trigger staging deployment
      - name: Staging deployment
        id: staging-deployment
        uses: the-actions-org/workflow-dispatch@v4
        with:
          workflow: Deployment
          repo: sh-proptech/deployment
          token: ${{ secrets.GH_PAT_TOKEN }}
          inputs: ${{ steps.read-stg-json.outputs.result }}
          ref: main

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'  # or the version you are using

      # Install dependencies
      - name: Install dependencies
        run: |
          npm install --frozen-lockfile

      # Test staging
      - name: Staging API tests
        id: staging-api-tests
        run: ./taskfile api_test
        env:
          URL: https://stg.ai.propmatch.co.uk
          CLIENT_ID: ${{ secrets.STG_TEST_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.STG_TEST_CLIENT_SECRET }}

      # Read production deployment JSON
      - name: Production deploy-prd.json
        if: ${{ github.event_name == 'push' }}
        id: read-prd-json
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const file = fs.readFileSync('./deployment/deploy-prd.json', 'utf8');
            const data = JSON.parse(file);
            data.image.tag = "${{ github.sha }}"
            return { manifest: JSON.stringify(data) }

      # Trigger production deployment
      - name: Production deployment
        if: ${{ github.event_name == 'push' }}
        id: production-deployment
        uses: the-actions-org/workflow-dispatch@v4
        with:
          workflow: Deployment
          repo: sh-proptech/deployment
          token: ${{ secrets.GH_PAT_TOKEN }}
          inputs: ${{ steps.read-prd-json.outputs.result }}
          ref: main

      # Test production
      - name: Production API tests
        id: production-api-tests
        run: ./taskfile api_test
        env:
          URL: https://ai.propmatch.co.uk
          CLIENT_ID: ${{ secrets.PRD_TEST_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.PRD_TEST_CLIENT_SECRET }}